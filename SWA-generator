#include <fstream>
#include <iostream>
#include <math.h>
#include <iomanip>
#include <string>
using namespace std;

string network1 = "83.txt";
string network2 = "82.txt";

int main() {
	ifstream fin1(network1);
	ifstream fin2(network2);
	ofstream fout("83-82.txt");
	ofstream out("report83-82.txt");

	out << "Merge of " << network1 << " and " << network2 << endl;

	out << "\nThe following layers were merged\n\n";

	int j = 0;
	char look;
	double input1, input2, output;
	int i = 1;
	int samesign = 0;
	double sum = 0;	double sum2 = 0; double sum3 = 0;

	double recommended[320];
	double others[320];
	int r = 0;
	int oth = 0;

	fin1 >> input1;
	fin2 >> input2;

	while (fin1 || fin2) {
		if (!(fin1 && fin2))
			cout << "Files are different sizes" << endl;

		if (input1 * input2 >= 0)
			samesign++;

		if (input1 != 0 && input2 != 0) {
			sum = sum + abs(log2(abs(input1 / input2)));
			sum2 = sum2 + abs(input1 - input2);
			sum3 = sum3 + abs(input1 + input2) / 2;
		}
    
    ///////// THE LAYERS YOU WANT TO MERGE SHOULD BE PLACED IN THIS If STATEMENT////////

		if (j == 64 || j == 58 || j == 56 || j == 55 || j == 52 || j == 48 || j == 44) {
			if(i == 1)
				out << j << endl;
			output = (input1 + input2) / 2;
		}

		else
			output = input1;

		fout << " " << output;

		look = fin1.peek();

		if (look == ' ') {
			look = fin1.get();
			look = fin1.peek();
		}

		if (look == '\n') {
			fout << '\n';
			if (sum2 != 0) {
				if ((samesign / (i - samesign + 0.0)) > 30 && abs(pow(2, (sum / i)) - 1) < 0.15) {
					recommended[r] = j;
					recommended[r + 1] = samesign / (i - samesign + 0.0);
					recommended[r + 2] = (pow(2, (sum / i)) - 1)*100;
					recommended[r + 3] = sum2*100/sum3;
					recommended[r + 4] = i;
					r = r + 5;
				}

				else {
					others[oth] = j;
					others[oth + 1] = samesign / (i - samesign + 0.0);
					others[oth + 2] = (pow(2, (sum / i)) - 1) * 100;
					others[oth + 3] = sum2 * 100 / sum3;
					others[oth + 4] = i;
					oth = oth + 5;
				}

				sum = 0;
				i = 0;
				samesign = 0;
				sum2 = 0;
				sum3 = 0;
			}

			j++;
		}


		fin1 >> input1;
		fin2 >> input2;


		i++;
	}


	out << "The following layers are possible merging paths\n" << endl;
	out << setw(8) << left << "No." << setw(12) << left << "FR" << setw(12) << left << "% MD" << setw(12) << left << "% AD" << "Size" << endl;

	for (i = 0; i < r; i = i + 5) 
		out << setw(8) << left << recommended[i] << setw(12) << left << recommended[i + 1] << setw(12) << left << setprecision(3) << recommended[i + 2] << setw(12) << left << recommended[i + 3] << recommended[i + 4] << endl;
	
	out << "\n\nThese are the less successful canidates\n" << endl;
	out << setw(8) << left << "No." << setw(12) << left << "FR" << setw(12) << left << "% MD" << setw(12) << left << "% AD" << "Size" << endl;

	for (i = 0; i < oth; i = i + 5)
		out << setw(8) << left << others[i] << setw(12) << left << others[i + 1] << setw(12) << left << others[i + 2] << setw(12) << left << others[i + 3] << setw(12) << left << others[i + 4] << endl;

	cout << "Done" << endl;
	cin >> i;

	return 0;
}
